
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftLPARENRPARENleftANDORleftMAIORMENORMAIOREQUALSMENOREQUALSEQUALSDIFFleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTTERNARYAND ASSIGN BOOL BREAK COLON COMMA DIFF DIVIDE DIVIDEEQUALS ELSE EQUALS EXPLAMATION FALSE FOR IF INT INTERROGATION LBRACE LCOLC LPAREN MAIOR MAIOREQUALS MENOR MENOREQUALS MINUS MINUSEQUALS MOD NAME NORMALSTRING NUMBER OR PLUS RBRACE RCOLC READ RETURN RPAREN SEMICOLON STRING SUMEQUALS TIMES TIMESEQUALS TRUE WHILE WRITEempty :end : SEMICOLONliteral : NUMBER\n                | TRUE\n                | FALSE\n                | NORMALSTRING\n                sequence_literal : literal COMMA sequence_literal\n                        | literaltype : INT\n            | STRING\n            | BOOLvariavel : NAME\n                | NAME LCOLC expression RCOLCprogram : sequence_declarationsequence_declaration : declaration sequence_declaration\n                            | declarationdeclaration  : procedure\n                    | function\n                    | var_Declaration\n                    var_Declaration : type sequence_var_Especification endlist_var_Declaration : var_Declaration list_var_Declaration\n                            | emptyvar_Especification   : NAME LCOLC NUMBER RCOLC\n                            | NAME ASSIGN expression\n                            | NAME\n                            | NAME LCOLC NUMBER RCOLC ASSIGN LBRACE sequence_literal RBRACEsequence_var_Especification  : var_Especification COMMA sequence_var_Especification\n                                    | var_Especification\n    parametro    : type NAME\n                    | type NAME LCOLC RCOLClist_parametro : sequence_parametro\n                      | emptysequence_parametro : parametro COMMA sequence_parametro\n                          | parametroprocedure : NAME LPAREN list_parametro RPAREN LBRACE block RBRACEfunction : type NAME LPAREN list_parametro RPAREN LBRACE block RBRACEexpression : expression INTERROGATION expression COLON expression %prec TERNARY\n    expression : MINUS expression %prec UMINUSexpression : EXPLAMATION expression %prec NOTexpression : LPAREN expression RPARENexpression : literalexpression : variavelexpression : expression MAIOR expression\n                  | expression MENOR expression\n                  | expression MAIOREQUALS expression\n                  | expression MENOREQUALS expression\n                  | expression EQUALS expression\n                  | expression DIFF expression\n                  | expression AND expression\n                  | expression OR expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n    expression : subCall_statement endlist_expression : sequence_expression\n                        | emptysequence_expression : expression COMMA sequence_expression\n                            | expressionassignment :   variavel ASSIGN expression\n                  |   variavel MOD expression\n                  |   variavel SUMEQUALS expression\n                  |   variavel MINUSEQUALS expression\n                  |   variavel TIMESEQUALS expression\n                  |   variavel DIVIDEEQUALS expression\n    statement    : if_statement\n                    | while_statement\n                    | for_statement\n                    | break_statement\n                    | return_statement\n                    | assignment end\n                    | subCall_statement end\n                    | write_statement end\n                    | read_statement end\n    list_statement : statement list_statement\n                        | emptyif_statement : IF LPAREN expression RPAREN LBRACE block RBRACE\n                    | IF LPAREN expression RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE block RBRACEfor_statement  :  FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN LBRACE block RBRACEbreak_statement    :   BREAK endreturn_statement : RETURN end\n                        | RETURN expression endsubCall_statement : NAME LPAREN list_expression RPARENwrite_statement : WRITE  list_expression read_statement : READ variavel block : list_var_Declaration list_statement'
    
_lr_action_items = {'NAME':([0,3,4,5,6,8,9,10,11,21,24,25,26,27,35,36,37,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,74,75,77,98,100,102,103,104,105,106,115,118,119,120,125,126,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,147,155,166,168,169,173,174,175,179,180,183,184,],[7,7,-17,-18,-19,14,-9,-10,-11,30,33,-20,-2,46,33,33,33,-1,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,117,-1,-22,46,-1,-35,117,-66,-67,-68,-69,-70,33,33,146,-21,33,33,-71,-72,-73,-74,33,33,146,-81,-82,33,33,33,33,33,33,-36,-83,33,-1,-1,146,-77,-79,-1,-1,-78,-80,]),'INT':([0,3,4,5,6,13,22,25,26,29,47,73,77,98,147,168,169,179,180,],[9,9,-17,-18,-19,9,9,-20,-2,9,9,9,9,-35,-36,9,9,9,9,]),'STRING':([0,3,4,5,6,13,22,25,26,29,47,73,77,98,147,168,169,179,180,],[10,10,-17,-18,-19,10,10,-20,-2,10,10,10,10,-35,-36,10,10,10,10,]),'BOOL':([0,3,4,5,6,13,22,25,26,29,47,73,77,98,147,168,169,179,180,],[11,11,-17,-18,-19,11,11,-20,-2,11,11,11,11,-35,-36,11,11,11,11,]),'$end':([1,2,3,4,5,6,12,25,26,98,147,],[0,-14,-16,-17,-18,-19,-15,-20,-2,-35,-36,]),'LPAREN':([7,14,24,33,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,111,112,113,115,117,118,125,126,132,133,138,139,140,141,142,143,166,],[13,22,37,53,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,132,133,134,37,53,37,37,37,37,37,37,37,37,37,37,37,37,]),'RPAREN':([13,17,18,19,20,22,26,30,31,33,38,39,41,42,43,44,48,53,67,68,69,70,76,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,123,150,151,152,153,156,157,158,159,160,161,176,],[-1,28,-31,-32,-34,-1,-2,-29,50,-12,-41,-42,-3,-4,-5,-6,-33,-1,-38,-39,97,-55,-30,124,-56,-57,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,-58,-37,164,165,-60,-61,-62,-63,-64,-65,178,]),'LCOLC':([14,30,33,46,117,146,],[23,49,52,23,52,52,]),'ASSIGN':([14,46,51,116,117,123,146,],[24,24,78,138,-12,-13,-12,]),'COMMA':([14,16,20,26,30,33,34,38,39,41,42,43,44,46,51,67,68,70,76,83,85,86,87,88,89,90,91,92,93,94,95,96,97,123,149,151,162,],[-25,27,29,-2,-29,-12,-24,-41,-42,-3,-4,-5,-6,-25,-23,-38,-39,-55,-30,125,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,163,-37,-26,]),'SEMICOLON':([14,15,16,26,33,34,38,39,40,41,42,43,44,45,46,51,67,68,70,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,107,108,109,110,114,115,118,123,124,137,144,145,146,150,151,154,156,157,158,159,160,161,162,170,],[-25,26,-28,-2,-12,-24,-41,-42,26,-3,-4,-5,-6,-27,-25,-23,-38,-39,-55,-56,-57,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,26,26,26,26,26,26,-1,-13,-84,26,-85,-86,-12,-58,-37,166,-60,-61,-62,-63,-64,-65,-26,173,]),'NUMBER':([23,24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,122,125,126,132,133,138,139,140,141,142,143,163,166,],[32,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'MINUS':([24,26,33,34,35,36,37,38,39,41,42,43,44,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,115,118,123,125,126,132,133,137,138,139,140,141,142,143,151,152,153,156,157,158,159,160,161,166,170,],[35,-2,-12,64,35,35,35,-41,-42,-3,-4,-5,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-38,-39,64,-55,64,64,64,64,64,64,64,64,64,64,64,-51,-52,-53,-54,-40,35,35,-13,35,35,35,35,64,35,35,35,35,35,35,-37,64,64,64,64,64,64,64,64,35,64,]),'EXPLAMATION':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,125,126,132,133,138,139,140,141,142,143,166,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'TRUE':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,122,125,126,132,133,138,139,140,141,142,143,163,166,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FALSE':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,122,125,126,132,133,138,139,140,141,142,143,163,166,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'NORMALSTRING':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,122,125,126,132,133,138,139,140,141,142,143,163,166,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'IF':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,111,-1,-22,-1,111,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'WHILE':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,112,-1,-22,-1,112,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'FOR':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,113,-1,-22,-1,113,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'BREAK':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,114,-1,-22,-1,114,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'RETURN':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,115,-1,-22,-1,115,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'WRITE':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,118,-1,-22,-1,118,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'READ':([25,26,47,72,73,74,77,100,102,103,104,105,106,120,128,129,130,131,135,136,155,168,169,174,175,179,180,183,184,],[-20,-2,-1,119,-1,-22,-1,119,-66,-67,-68,-69,-70,-21,-71,-72,-73,-74,-81,-82,-83,-1,-1,-77,-79,-1,-1,-78,-80,]),'RBRACE':([25,26,41,42,43,44,47,71,72,73,74,77,99,100,101,102,103,104,105,106,120,121,127,128,129,130,131,135,136,148,149,155,167,168,169,171,172,174,175,179,180,181,182,183,184,],[-20,-2,-3,-4,-5,-6,-1,98,-1,-1,-22,-1,-87,-1,-76,-66,-67,-68,-69,-70,-21,147,-75,-71,-72,-73,-74,-81,-82,162,-8,-83,-7,-1,-1,174,175,-77,-79,-1,-1,183,184,-78,-80,]),'INTERROGATION':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,54,-41,-42,-3,-4,-5,-6,-38,-39,54,-55,54,54,54,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,54,-37,54,54,54,54,54,54,54,54,54,]),'MAIOR':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,55,-41,-42,-3,-4,-5,-6,-38,-39,55,-55,55,55,55,-43,-44,-45,-46,-47,-48,55,55,-51,-52,-53,-54,-40,-13,55,-37,55,55,55,55,55,55,55,55,55,]),'MENOR':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,56,-41,-42,-3,-4,-5,-6,-38,-39,56,-55,56,56,56,-43,-44,-45,-46,-47,-48,56,56,-51,-52,-53,-54,-40,-13,56,-37,56,56,56,56,56,56,56,56,56,]),'MAIOREQUALS':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,57,-41,-42,-3,-4,-5,-6,-38,-39,57,-55,57,57,57,-43,-44,-45,-46,-47,-48,57,57,-51,-52,-53,-54,-40,-13,57,-37,57,57,57,57,57,57,57,57,57,]),'MENOREQUALS':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,58,-41,-42,-3,-4,-5,-6,-38,-39,58,-55,58,58,58,-43,-44,-45,-46,-47,-48,58,58,-51,-52,-53,-54,-40,-13,58,-37,58,58,58,58,58,58,58,58,58,]),'EQUALS':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,59,-41,-42,-3,-4,-5,-6,-38,-39,59,-55,59,59,59,-43,-44,-45,-46,-47,-48,59,59,-51,-52,-53,-54,-40,-13,59,-37,59,59,59,59,59,59,59,59,59,]),'DIFF':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,60,-41,-42,-3,-4,-5,-6,-38,-39,60,-55,60,60,60,-43,-44,-45,-46,-47,-48,60,60,-51,-52,-53,-54,-40,-13,60,-37,60,60,60,60,60,60,60,60,60,]),'AND':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,61,-41,-42,-3,-4,-5,-6,-38,-39,61,-55,61,61,61,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,61,-37,61,61,61,61,61,61,61,61,61,]),'OR':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,62,-41,-42,-3,-4,-5,-6,-38,-39,62,-55,62,62,62,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,62,-37,62,62,62,62,62,62,62,62,62,]),'PLUS':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,63,-41,-42,-3,-4,-5,-6,-38,-39,63,-55,63,63,63,63,63,63,63,63,63,63,63,-51,-52,-53,-54,-40,-13,63,-37,63,63,63,63,63,63,63,63,63,]),'TIMES':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,65,-41,-42,-3,-4,-5,-6,-38,-39,65,-55,65,65,65,65,65,65,65,65,65,65,65,65,65,-53,-54,-40,-13,65,-37,65,65,65,65,65,65,65,65,65,]),'DIVIDE':([26,33,34,38,39,41,42,43,44,67,68,69,70,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,137,151,152,153,156,157,158,159,160,161,170,],[-2,-12,66,-41,-42,-3,-4,-5,-6,-38,-39,66,-55,66,66,66,66,66,66,66,66,66,66,66,66,66,-53,-54,-40,-13,66,-37,66,66,66,66,66,66,66,66,66,]),'RCOLC':([26,32,33,38,39,41,42,43,44,49,67,68,70,79,85,86,87,88,89,90,91,92,93,94,95,96,97,123,151,],[-2,51,-12,-41,-42,-3,-4,-5,-6,76,-38,-39,-55,123,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,-37,]),'COLON':([26,33,38,39,41,42,43,44,67,68,70,84,85,86,87,88,89,90,91,92,93,94,95,96,97,123,151,],[-2,-12,-41,-42,-3,-4,-5,-6,-38,-39,-55,126,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-40,-13,-37,]),'LBRACE':([28,50,78,164,165,177,178,],[47,77,122,168,169,179,180,]),'MOD':([116,117,123,146,],[139,-12,-13,-12,]),'SUMEQUALS':([116,117,123,146,],[140,-12,-13,-12,]),'MINUSEQUALS':([116,117,123,146,],[141,-12,-13,-12,]),'TIMESEQUALS':([116,117,123,146,],[142,-12,-13,-12,]),'DIVIDEEQUALS':([116,117,123,146,],[143,-12,-13,-12,]),'ELSE':([174,],[177,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sequence_declaration':([0,3,],[2,12,]),'declaration':([0,3,],[3,3,]),'procedure':([0,3,],[4,4,]),'function':([0,3,],[5,5,]),'var_Declaration':([0,3,47,73,77,168,169,179,180,],[6,6,73,73,73,73,73,73,73,]),'type':([0,3,13,22,29,47,73,77,168,169,179,180,],[8,8,21,21,21,75,75,75,75,75,75,75,]),'sequence_var_Especification':([8,27,75,],[15,45,15,]),'var_Especification':([8,27,75,],[16,16,16,]),'list_parametro':([13,22,],[17,31,]),'sequence_parametro':([13,22,29,],[18,18,48,]),'empty':([13,22,47,53,72,73,77,100,118,168,169,179,180,],[19,19,74,82,101,74,74,101,82,74,74,74,74,]),'parametro':([13,22,29,],[20,20,20,]),'end':([15,40,107,108,109,110,114,115,137,],[25,70,128,129,130,131,135,136,155,]),'expression':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,125,126,132,133,138,139,140,141,142,143,166,],[34,67,68,69,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,137,83,83,151,152,153,156,157,158,159,160,161,170,]),'literal':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,115,118,122,125,126,132,133,138,139,140,141,142,143,163,166,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,149,38,38,38,38,38,38,38,38,38,38,149,38,]),'variavel':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,100,115,118,119,125,126,132,133,134,138,139,140,141,142,143,166,173,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,116,116,39,39,145,39,39,39,39,116,39,39,39,39,39,39,39,116,]),'subCall_statement':([24,35,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,100,115,118,125,126,132,133,138,139,140,141,142,143,166,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,108,108,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'block':([47,77,168,169,179,180,],[71,121,171,172,181,182,]),'list_var_Declaration':([47,73,77,168,169,179,180,],[72,120,72,72,72,72,72,]),'list_expression':([53,118,],[80,144,]),'sequence_expression':([53,118,125,],[81,81,150,]),'list_statement':([72,100,],[99,127,]),'statement':([72,100,],[100,100,]),'if_statement':([72,100,],[102,102,]),'while_statement':([72,100,],[103,103,]),'for_statement':([72,100,],[104,104,]),'break_statement':([72,100,],[105,105,]),'return_statement':([72,100,],[106,106,]),'assignment':([72,100,134,173,],[107,107,154,176,]),'write_statement':([72,100,],[109,109,]),'read_statement':([72,100,],[110,110,]),'sequence_literal':([122,163,],[148,167,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',41),
  ('end -> SEMICOLON','end',1,'p_define_end_of_instruction','grammar.py',45),
  ('literal -> NUMBER','literal',1,'p_literal','grammar.py',49),
  ('literal -> TRUE','literal',1,'p_literal','grammar.py',50),
  ('literal -> FALSE','literal',1,'p_literal','grammar.py',51),
  ('literal -> NORMALSTRING','literal',1,'p_literal','grammar.py',52),
  ('sequence_literal -> literal COMMA sequence_literal','sequence_literal',3,'p_sequence_literal','grammar.py',57),
  ('sequence_literal -> literal','sequence_literal',1,'p_sequence_literal','grammar.py',58),
  ('type -> INT','type',1,'p_define_type','grammar.py',62),
  ('type -> STRING','type',1,'p_define_type','grammar.py',63),
  ('type -> BOOL','type',1,'p_define_type','grammar.py',64),
  ('variavel -> NAME','variavel',1,'p_variavel','grammar.py',68),
  ('variavel -> NAME LCOLC expression RCOLC','variavel',4,'p_variavel','grammar.py',69),
  ('program -> sequence_declaration','program',1,'p_program','grammar.py',79),
  ('sequence_declaration -> declaration sequence_declaration','sequence_declaration',2,'p_sequence_declaration','grammar.py',83),
  ('sequence_declaration -> declaration','sequence_declaration',1,'p_sequence_declaration','grammar.py',84),
  ('declaration -> procedure','declaration',1,'p_declaration','grammar.py',89),
  ('declaration -> function','declaration',1,'p_declaration','grammar.py',90),
  ('declaration -> var_Declaration','declaration',1,'p_declaration','grammar.py',91),
  ('var_Declaration -> type sequence_var_Especification end','var_Declaration',3,'p_var_declaration','grammar.py',96),
  ('list_var_Declaration -> var_Declaration list_var_Declaration','list_var_Declaration',2,'p_list_var_declaration','grammar.py',104),
  ('list_var_Declaration -> empty','list_var_Declaration',1,'p_list_var_declaration','grammar.py',105),
  ('var_Especification -> NAME LCOLC NUMBER RCOLC','var_Especification',4,'p_var_especification','grammar.py',116),
  ('var_Especification -> NAME ASSIGN expression','var_Especification',3,'p_var_especification','grammar.py',117),
  ('var_Especification -> NAME','var_Especification',1,'p_var_especification','grammar.py',118),
  ('var_Especification -> NAME LCOLC NUMBER RCOLC ASSIGN LBRACE sequence_literal RBRACE','var_Especification',8,'p_var_especification','grammar.py',119),
  ('sequence_var_Especification -> var_Especification COMMA sequence_var_Especification','sequence_var_Especification',3,'p_sequence_var_Especification','grammar.py',129),
  ('sequence_var_Especification -> var_Especification','sequence_var_Especification',1,'p_sequence_var_Especification','grammar.py',130),
  ('parametro -> type NAME','parametro',2,'p_define_parametro','grammar.py',142),
  ('parametro -> type NAME LCOLC RCOLC','parametro',4,'p_define_parametro','grammar.py',143),
  ('list_parametro -> sequence_parametro','list_parametro',1,'p_list_parametro','grammar.py',150),
  ('list_parametro -> empty','list_parametro',1,'p_list_parametro','grammar.py',151),
  ('sequence_parametro -> parametro COMMA sequence_parametro','sequence_parametro',3,'p_sequence_parametro','grammar.py',155),
  ('sequence_parametro -> parametro','sequence_parametro',1,'p_sequence_parametro','grammar.py',156),
  ('procedure -> NAME LPAREN list_parametro RPAREN LBRACE block RBRACE','procedure',7,'p_procedure','grammar.py',163),
  ('function -> type NAME LPAREN list_parametro RPAREN LBRACE block RBRACE','function',8,'p_function','grammar.py',169),
  ('expression -> expression INTERROGATION expression COLON expression','expression',5,'p_ternary','grammar.py',178),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','grammar.py',183),
  ('expression -> EXPLAMATION expression','expression',2,'p_expression_not','grammar.py',187),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','grammar.py',191),
  ('expression -> literal','expression',1,'p_define_expression_literal','grammar.py',195),
  ('expression -> variavel','expression',1,'p_define_expression_var','grammar.py',199),
  ('expression -> expression MAIOR expression','expression',3,'p_expression_logop','grammar.py',203),
  ('expression -> expression MENOR expression','expression',3,'p_expression_logop','grammar.py',204),
  ('expression -> expression MAIOREQUALS expression','expression',3,'p_expression_logop','grammar.py',205),
  ('expression -> expression MENOREQUALS expression','expression',3,'p_expression_logop','grammar.py',206),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_logop','grammar.py',207),
  ('expression -> expression DIFF expression','expression',3,'p_expression_logop','grammar.py',208),
  ('expression -> expression AND expression','expression',3,'p_expression_logop','grammar.py',209),
  ('expression -> expression OR expression','expression',3,'p_expression_logop','grammar.py',210),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operators','grammar.py',223),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operators','grammar.py',224),
  ('expression -> expression TIMES expression','expression',3,'p_binary_operators','grammar.py',225),
  ('expression -> expression DIVIDE expression','expression',3,'p_binary_operators','grammar.py',226),
  ('expression -> subCall_statement end','expression',2,'p_define_expression_subcall','grammar.py',239),
  ('list_expression -> sequence_expression','list_expression',1,'p_list_expression','grammar.py',243),
  ('list_expression -> empty','list_expression',1,'p_list_expression','grammar.py',244),
  ('sequence_expression -> expression COMMA sequence_expression','sequence_expression',3,'p_sequence_expression','grammar.py',248),
  ('sequence_expression -> expression','sequence_expression',1,'p_sequence_expression','grammar.py',249),
  ('assignment -> variavel ASSIGN expression','assignment',3,'p_assign','grammar.py',253),
  ('assignment -> variavel MOD expression','assignment',3,'p_assign','grammar.py',254),
  ('assignment -> variavel SUMEQUALS expression','assignment',3,'p_assign','grammar.py',255),
  ('assignment -> variavel MINUSEQUALS expression','assignment',3,'p_assign','grammar.py',256),
  ('assignment -> variavel TIMESEQUALS expression','assignment',3,'p_assign','grammar.py',257),
  ('assignment -> variavel DIVIDEEQUALS expression','assignment',3,'p_assign','grammar.py',258),
  ('statement -> if_statement','statement',1,'p_statement','grammar.py',281),
  ('statement -> while_statement','statement',1,'p_statement','grammar.py',282),
  ('statement -> for_statement','statement',1,'p_statement','grammar.py',283),
  ('statement -> break_statement','statement',1,'p_statement','grammar.py',284),
  ('statement -> return_statement','statement',1,'p_statement','grammar.py',285),
  ('statement -> assignment end','statement',2,'p_statement','grammar.py',286),
  ('statement -> subCall_statement end','statement',2,'p_statement','grammar.py',287),
  ('statement -> write_statement end','statement',2,'p_statement','grammar.py',288),
  ('statement -> read_statement end','statement',2,'p_statement','grammar.py',289),
  ('list_statement -> statement list_statement','list_statement',2,'p_list_statement','grammar.py',294),
  ('list_statement -> empty','list_statement',1,'p_list_statement','grammar.py',295),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE block RBRACE','if_statement',7,'p_statement_if','grammar.py',298),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE','if_statement',11,'p_statement_if','grammar.py',299),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE block RBRACE','while_statement',7,'p_statement_while','grammar.py',309),
  ('for_statement -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN LBRACE block RBRACE','for_statement',11,'p_statement_for','grammar.py',312),
  ('break_statement -> BREAK end','break_statement',2,'p_statement_break','grammar.py',316),
  ('return_statement -> RETURN end','return_statement',2,'p_statement_return','grammar.py',319),
  ('return_statement -> RETURN expression end','return_statement',3,'p_statement_return','grammar.py',320),
  ('subCall_statement -> NAME LPAREN list_expression RPAREN','subCall_statement',4,'p_statement_subCall','grammar.py',323),
  ('write_statement -> WRITE list_expression','write_statement',2,'p_statement_write','grammar.py',328),
  ('read_statement -> READ variavel','read_statement',2,'p_statement_read','grammar.py',336),
  ('block -> list_var_Declaration list_statement','block',2,'p_block','grammar.py',343),
]
